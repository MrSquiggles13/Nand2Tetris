// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Snake/Game.jack

/** Snake program. */
class Game 
{
	field boolean m_playing;
	field Snake m_snake;
	field int length, speed, points, m_score, m_count;
	field Grid m_grid;
	field Fruit m_fruit;

	field int gridX1, gridX2, gridY1, gridY2;
   
	constructor Game new(boolean playing)
	{
		var int difficulty;
		let difficulty = 0;
		let m_count = 0;
		let gridX1 = 150;
		let gridX2 = 350;
		let gridY1 = 30;
		let gridY2 = 230;
		let length = 0;
		let speed = 0;
		let points = 0;
		let m_playing = playing;

		do Screen.clearScreen();

		do Output.println();
		do Output.println();
		do Output.println();
		do Output.println();
		do Output.printString("                    Select Your Difficulty");
		do Output.println();
		do Output.println();
		do Output.printString("                    1. Easy");
		do Output.println();
		do Output.printString("                    2. Medium");
		do Output.println();
		do Output.printString("                    3. Hard");
		do Output.println();
		
		let difficulty = Keyboard.readInt("                    Enter [1-3]: ");

		if(difficulty = 1)
		{
			let length = 3;
			let speed = 80;
			let points = 10;
		}
		else
		{
			let length = 20;
			let speed = 50;
			let points = 100;
		}
		if(difficulty = 2)
		{
			let length = 7;
			let speed = 30;
			let points = 25;
		}
		if(difficulty = 3)
		{
			let length = 12;
			let speed = 10;
			let points = 60;
		}

		do Sys.wait(100);
		do Screen.clearScreen();

		let m_grid = Grid.new(gridX1, gridY1, gridX2, gridY2);
		let m_snake = Snake.new(length, 1);
		let m_fruit = Fruit.new(100, 100, points);

		do m_snake.setup(m_grid);
		do m_fruit.rePos();

		do Sys.wait(300);

		return this;
	}

	method void setScore()
	{
		do Output.moveCursor(2, 3);
		do Output.printString("Score: ");
		do Output.printInt(m_score);
		return;
	}

	method void play()
	{
		var char key;

		while (key = 0)
		{
			let key = Keyboard.keyPressed();
			do m_snake.move(m_grid);
			do Sys.wait(5);
			let m_playing = m_snake.isAlive();
			do Sys.wait(5);
			if(m_snake.checkIfAte(m_fruit))
			{
				let m_score = m_score + points;
				do setScore();
				let m_count = m_count + 1;
				if(m_count > 1)
				{
					if(speed < 2)
					{}
					else
					{
						let speed = speed - 1;
						let m_count = 0;
					}

				}
			}
			do Sys.wait(speed);
		}

		if (key = 81) {let m_playing = false;}
		if (key = 131) {do m_snake.setPreDirection(m_snake.getDirection()); do m_snake.setDirection(1);} //up
		if (key = 133) {do m_snake.setPreDirection(m_snake.getDirection()); do m_snake.setDirection(2);} //down
		if (key = 130) {do m_snake.setPreDirection(m_snake.getDirection()); do m_snake.setDirection(3);} //left
		if (key = 132) {do m_snake.setPreDirection(m_snake.getDirection()); do m_snake.setDirection(4);} //right

		while (~(key = 0))
		{
			let key = Keyboard.keyPressed();
			do m_snake.move(m_grid);
			do Sys.wait(5);
			let m_playing = m_snake.isAlive();
			do Sys.wait(5);
			if(m_snake.checkIfAte(m_fruit))
			{
				let m_score = m_score + points;
				do setScore();
				let m_count = m_count + 1;
				if(m_count > 1)
				{
					if(speed < 2)
					{}
					else
					{
						let speed = speed - 1;
						let m_count = 0;
					}

				}
			}
			do Sys.wait(speed);
		}

		return;
	} 

	method boolean getPlaying(){return m_playing;}
}
