// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[15], b=instruction[3], out=writeM);

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=outInstruct);
    Not(in=instruction[15], out=notinstruct15);
    Not(in=instruction[5], out=notinstruct5);
    And(a=instruction[15], b=instruction[5], out=outandA);
    Or(a=notinstruct15, b=instruction[5], out=outorA);
    Nor(a=notinstruct15, b=notinstruct5, out=outnorA);
    Or(a=outandA, b=outorA, out=outordoub);
    Or(a=outordoub, b=outnorA, out=Aload);
    ARegister(in=outInstruct, load=Aload, out=outA, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[12], out=Mload);
    Mux16(a=outA, b=inM, sel=Mload, out=outData);
    ALU(x=outD, y=outData, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=outZero, ng=outNegative);

    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=outD);

    DMux8Way(in=true, sel=instruction[0..2], a=null, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);
    DMux4Way(in=true, sel[1]=outZero, sel[0]=outNegative, a=positive, b=negative, c=zeropos, d=zeroneg);
    
    Or(a=zeropos, b=zeroneg, out=zero);
    Or(a=zero, b=positive, out=positivezero);
    Or(a=zero, b=negative, out=negativezero);
    Or(a=positive, b=negative, out=notzero);

    Not(in=null, out=outnull);
    And(a=JGT, b=positive, out=outGT);
    And(a=JEQ, b=zero, out=outEQ);
    And(a=JGE, b=positivezero, out=outGE);
    And(a=JLT, b=negative, out=outLT);
    And(a=JNE, b=notzero, out=outNE);
    And(a=JLE, b=negativezero, out=outLE);
    Mux8Way(a=outnull, b=outGT, c=outEQ, d=outGE, e=outLT, f=outNE, g=outLE, h=true, sel=instruction[0..2], out=pcMuxOut);
    And(a=pcMuxOut, b=instruction[15], out=pcload);
    PC(in=outA, load=pcload, inc=true, reset=reset, out[0..14]=pc);
}